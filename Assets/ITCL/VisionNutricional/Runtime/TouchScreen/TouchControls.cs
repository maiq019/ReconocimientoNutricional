//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/ITCL/VisionNutricional/Runtime/TouchScreen/TouchControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace ITCL.VisionNutricional.Runtime.TouchScreen
{
    public partial class @TouchControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @TouchControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""TouchControls"",
    ""maps"": [
        {
            ""name"": ""Touch"",
            ""id"": ""e9e0fc26-9cc3-4e74-b184-f3be6180ba15"",
            ""actions"": [
                {
                    ""name"": ""TouchInput"",
                    ""type"": ""PassThrough"",
                    ""id"": ""1b9fc10c-e839-498a-b48e-f494d72bb085"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryTouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""1ee6973b-4427-4ea5-a7cd-bac89b569f6e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondTouchPress"",
                    ""type"": ""Button"",
                    ""id"": ""2761af45-1188-4984-a06c-4741583c86c0"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PrimaryPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""ad7417d8-294e-4421-8f5c-54408182fc6c"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SecondPosition"",
                    ""type"": ""PassThrough"",
                    ""id"": ""7c365878-5619-455e-94b4-b9b5427e69d3"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a8b908a9-fc92-4e9d-9982-a9d4d29b14c4"",
                    ""path"": ""<Touchscreen>/primaryTouch"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TouchInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d62fef5c-b019-4c4a-b3bf-dc059eb5e977"",
                    ""path"": ""<Touchscreen>/primaryTouch/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4703b868-0807-4cb1-8c32-4235a5803f32"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": ""Press(behavior=2)"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PrimaryTouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fec797e1-f005-4b0f-9cf8-c599d4072b69"",
                    ""path"": ""<Touchscreen>/touch1/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""549465a5-689b-4fd9-b60c-d0f8e0856545"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SecondTouchPress"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Touch
            m_Touch = asset.FindActionMap("Touch", throwIfNotFound: true);
            m_Touch_TouchInput = m_Touch.FindAction("TouchInput", throwIfNotFound: true);
            m_Touch_PrimaryTouchPress = m_Touch.FindAction("PrimaryTouchPress", throwIfNotFound: true);
            m_Touch_SecondTouchPress = m_Touch.FindAction("SecondTouchPress", throwIfNotFound: true);
            m_Touch_PrimaryPosition = m_Touch.FindAction("PrimaryPosition", throwIfNotFound: true);
            m_Touch_SecondPosition = m_Touch.FindAction("SecondPosition", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Touch
        private readonly InputActionMap m_Touch;
        private ITouchActions m_TouchActionsCallbackInterface;
        private readonly InputAction m_Touch_TouchInput;
        private readonly InputAction m_Touch_PrimaryTouchPress;
        private readonly InputAction m_Touch_SecondTouchPress;
        private readonly InputAction m_Touch_PrimaryPosition;
        private readonly InputAction m_Touch_SecondPosition;
        public struct TouchActions
        {
            private @TouchControls m_Wrapper;
            public TouchActions(@TouchControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @TouchInput => m_Wrapper.m_Touch_TouchInput;
            public InputAction @PrimaryTouchPress => m_Wrapper.m_Touch_PrimaryTouchPress;
            public InputAction @SecondTouchPress => m_Wrapper.m_Touch_SecondTouchPress;
            public InputAction @PrimaryPosition => m_Wrapper.m_Touch_PrimaryPosition;
            public InputAction @SecondPosition => m_Wrapper.m_Touch_SecondPosition;
            public InputActionMap Get() { return m_Wrapper.m_Touch; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(TouchActions set) { return set.Get(); }
            public void SetCallbacks(ITouchActions instance)
            {
                if (m_Wrapper.m_TouchActionsCallbackInterface != null)
                {
                    @TouchInput.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchInput;
                    @TouchInput.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchInput;
                    @TouchInput.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnTouchInput;
                    @PrimaryTouchPress.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPress;
                    @PrimaryTouchPress.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPress;
                    @PrimaryTouchPress.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryTouchPress;
                    @SecondTouchPress.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondTouchPress;
                    @SecondTouchPress.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondTouchPress;
                    @SecondTouchPress.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondTouchPress;
                    @PrimaryPosition.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryPosition;
                    @PrimaryPosition.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryPosition;
                    @PrimaryPosition.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnPrimaryPosition;
                    @SecondPosition.started -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondPosition;
                    @SecondPosition.performed -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondPosition;
                    @SecondPosition.canceled -= m_Wrapper.m_TouchActionsCallbackInterface.OnSecondPosition;
                }
                m_Wrapper.m_TouchActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @TouchInput.started += instance.OnTouchInput;
                    @TouchInput.performed += instance.OnTouchInput;
                    @TouchInput.canceled += instance.OnTouchInput;
                    @PrimaryTouchPress.started += instance.OnPrimaryTouchPress;
                    @PrimaryTouchPress.performed += instance.OnPrimaryTouchPress;
                    @PrimaryTouchPress.canceled += instance.OnPrimaryTouchPress;
                    @SecondTouchPress.started += instance.OnSecondTouchPress;
                    @SecondTouchPress.performed += instance.OnSecondTouchPress;
                    @SecondTouchPress.canceled += instance.OnSecondTouchPress;
                    @PrimaryPosition.started += instance.OnPrimaryPosition;
                    @PrimaryPosition.performed += instance.OnPrimaryPosition;
                    @PrimaryPosition.canceled += instance.OnPrimaryPosition;
                    @SecondPosition.started += instance.OnSecondPosition;
                    @SecondPosition.performed += instance.OnSecondPosition;
                    @SecondPosition.canceled += instance.OnSecondPosition;
                }
            }
        }
        public TouchActions @Touch => new TouchActions(this);
        public interface ITouchActions
        {
            void OnTouchInput(InputAction.CallbackContext context);
            void OnPrimaryTouchPress(InputAction.CallbackContext context);
            void OnSecondTouchPress(InputAction.CallbackContext context);
            void OnPrimaryPosition(InputAction.CallbackContext context);
            void OnSecondPosition(InputAction.CallbackContext context);
        }
    }
}
